[
  {
    "Question": "Write a function to reverse words in a given string.",
    "Answer": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))",
    "task_id": 604
  },
  {
    "Question": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "Answer": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ",
    "task_id": 613
  },
  {
    "Question": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "Answer": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)",
    "task_id": 614
  },
  {
    "Question": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "Answer": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ",
    "task_id": 616
  },
  {
    "Question": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "Answer": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2",
    "task_id": 617
  },
  {
    "Question": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "Answer": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums",
    "task_id": 623
  },
  {
    "Question": "Write a python function to convert the given string to upper case.",
    "Answer": "def is_upper(string):\r\n  return (string.upper())",
    "task_id": 624
  },
  {
    "Question": "Write a python function to find even numbers from a mixed list.",
    "Answer": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li",
    "task_id": 629
  },
  {
    "Question": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "Answer": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ",
    "task_id": 634
  },
  {
    "Question": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "Answer": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
    "task_id": 636
  },
  {
    "Question": "Write a function to check whether the given amount has no profit and no loss",
    "Answer": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False",
    "task_id": 637
  },
  {
    "Question": "Write a function to find the nth nonagonal number.",
    "Answer": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ",
    "task_id": 641
  },
  {
    "Question": "Write a function to find the product of itâ€™s kth index in the given tuples.",
    "Answer": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ",
    "task_id": 645
  },
  {
    "Question": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "Answer": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",
    "task_id": 648
  },
  {
    "Question": "Write a python function to check whether the given two arrays are equal or not.",
    "Answer": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True",
    "task_id": 650
  },
  {
    "Question": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "Answer": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))",
    "task_id": 652
  },
  {
    "Question": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "Answer": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d",
    "task_id": 653
  },
  {
    "Question": "Write a function to find the item with maximum occurrences in a given list.",
    "Answer": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
    "task_id": 658
  },
  {
    "Question": "Write a python function to find the average of even numbers till a given even number.",
    "Answer": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ",
    "task_id": 664
  },
  {
    "Question": "Write a function to find maximum of three numbers.",
    "Answer": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum",
    "task_id": 672
  },
  {
    "Question": "Write a function to remove duplicate words from a given string using collections module.",
    "Answer": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result",
    "task_id": 674
  },
  {
    "Question": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "Answer": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False",
    "task_id": 680
  },
  {
    "Question": "Write a function to multiply two lists using map and lambda function.",
    "Answer": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)",
    "task_id": 682
  },
  {
    "Question": "Write a python function to count occurences of a character in a repeated string.",
    "Answer": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ",
    "task_id": 684
  },
  {
    "Question": "Write a function to get the length of a complex number.",
    "Answer": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length",
    "task_id": 688
  },
  {
    "Question": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "Answer": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ",
    "task_id": 699
  },
  {
    "Question": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "Answer": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans",
    "task_id": 702
  },
  {
    "Question": "Write a python function to convert a string to a list.",
    "Answer": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ",
    "task_id": 708
  },
  {
    "Question": "Write a function to count unique keys for each value present in the tuple.",
    "Answer": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ",
    "task_id": 709
  },
  {
    "Question": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "Answer": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False",
    "task_id": 711
  },
  {
    "Question": "Write a function to remove duplicates from a list of lists.",
    "Answer": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate",
    "task_id": 712
  },
  {
    "Question": "Write a function to check if the given tuple contains all valid values or not.",
    "Answer": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ",
    "task_id": 713
  },
  {
    "Question": "Write a function to convert the given string of integers into a tuple.",
    "Answer": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ",
    "task_id": 715
  },
  {
    "Question": "Write a function to calculate the standard deviation.",
    "Answer": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean",
    "task_id": 717
  },
  {
    "Question": "Write a function to create a list taking alternate elements from another given list.",
    "Answer": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ",
    "task_id": 718
  },
  {
    "Question": "Write a function to add a dictionary to the tuple.",
    "Answer": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ",
    "task_id": 720
  },
  {
    "Question": "Write a function to multiply the adjacent elements of the given tuple.",
    "Answer": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
    "task_id": 726
  },
  {
    "Question": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "Answer": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i",
    "task_id": 736
  },
  {
    "Question": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "Answer": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ",
    "task_id": 737
  },
  {
    "Question": "Write a function to calculate the geometric sum of n-1.",
    "Answer": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)",
    "task_id": 738
  },
  {
    "Question": "Write a python function to find the index of smallest triangular number with n digits.",
    "Answer": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ",
    "task_id": 739
  },
  {
    "Question": "Write a python function to check whether all the characters are same or not.",
    "Answer": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True",
    "task_id": 741
  },
  {
    "Question": "Write a function to rotate a given list by specified number of items to the right direction.",
    "Answer": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result",
    "task_id": 743
  },
  {
    "Question": "Write a function to sort a given list of strings of numbers numerically.",
    "Answer": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result",
    "task_id": 749
  },
  {
    "Question": "Write a function to check if the given array represents min heap or not.",
    "Answer": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child",
    "task_id": 751
  },
  {
    "Question": "Write a function to check whether the given month number contains 30 days or not.",
    "Answer": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False",
    "task_id": 762
  },
  {
    "Question": "Write a python function to count the number of pairs whose sum is equal to â€˜sumâ€™.",
    "Answer": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
    "task_id": 767
  },
  {
    "Question": "Write a function to find the occurrence and position of the substrings within a string.",
    "Answer": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)",
    "task_id": 773
  },
  {
    "Question": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "Answer": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
    "task_id": 775
  },
  {
    "Question": "Write a python function to find the sum of non-repeated elements in a given array.",
    "Answer": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum",
    "task_id": 777
  },
  {
    "Question": "Write a python function to find the sum of all odd length subarrays.",
    "Answer": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum",
    "task_id": 782
  },
  {
    "Question": "Write a function to find the product of first even and odd number of a given list.",
    "Answer": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)",
    "task_id": 784
  },
  {
    "Question": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "Answer": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i",
    "task_id": 786
  },
  {
    "Question": "Write a function that matches a string that has an a followed by three 'b'.",
    "Answer": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
    "task_id": 787
  },
  {
    "Question": "Write a python function to check whether every even index contains even numbers of a given list.",
    "Answer": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
    "task_id": 790
  },
  {
    "Question": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "Answer": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
    "task_id": 794
  },
  {
    "Question": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "Answer": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items",
    "task_id": 795
  },
  {
    "Question": "Write a python function to check whether the given number is a perfect square or not.",
    "Answer": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False",
    "task_id": 803
  },
  {
    "Question": "Write a function to find maximum run of uppercase characters in the given string.",
    "Answer": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)",
    "task_id": 806
  },
  {
    "Question": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "Answer": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr",
    "task_id": 815
  },
  {
    "Question": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "Answer": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result",
    "task_id": 817
  },
  {
    "Question": "Write a function to round up a number to specific digits.",
    "Answer": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)",
    "task_id": 830
  },
  {
    "Question": "Write a function to get dictionary keys as a list.",
    "Answer": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list",
    "task_id": 833
  },
  {
    "Question": "Write a python function to find the slope of a line.",
    "Answer": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ",
    "task_id": 835
  },
  {
    "Question": "Write a function to find length of the subarray having maximum sum.",
    "Answer": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)",
    "task_id": 836
  },
  {
    "Question": "Write a python function to find the cube sum of first n odd natural numbers.",
    "Answer": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum",
    "task_id": 837
  },
  {
    "Question": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "Answer": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ",
    "task_id": 856
  },
  {
    "Question": "Write a function to generate all sublists of a given list.",
    "Answer": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs",
    "task_id": 859
  },
  {
    "Question": "Write a python function to check if the string is a concatenation of another string.",
    "Answer": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True",
    "task_id": 874
  },
  {
    "Question": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "Answer": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ",
    "task_id": 875
  },
  {
    "Question": "Write a python function to find number of solutions in quadratic equation.",
    "Answer": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ",
    "task_id": 880
  },
  {
    "Question": "Write a function to caluclate perimeter of a parallelogram.",
    "Answer": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter",
    "task_id": 882
  },
  {
    "Question": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "Answer": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result",
    "task_id": 883
  },
  {
    "Question": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "Answer": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ",
    "task_id": 886
  },
  {
    "Question": "Write a function to substract the elements of the given nested tuples.",
    "Answer": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
    "task_id": 888
  },
  {
    "Question": "Write a function to remove multiple spaces in a string.",
    "Answer": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))",
    "task_id": 892
  },
  {
    "Question": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "Answer": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)",
    "task_id": 896
  },
  {
    "Question": "Write a function to combine two dictionaries by adding values for common keys.",
    "Answer": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict",
    "task_id": 902
  },
  {
    "Question": "Write a python function to count the total unset bits from 1 to n.",
    "Answer": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ",
    "task_id": 903
  },
  {
    "Question": "Write a python function to find the sum of squares of binomial co-efficients.",
    "Answer": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",
    "task_id": 905
  },
  {
    "Question": "Write a function to find the previous palindrome of a specified number.",
    "Answer": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x",
    "task_id": 909
  },
  {
    "Question": "Write a function to validate a gregorian date.",
    "Answer": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False",
    "task_id": 910
  },
  {
    "Question": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "Answer": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')",
    "task_id": 917
  },
  {
    "Question": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "Answer": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))",
    "task_id": 923
  },
  {
    "Question": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "Answer": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)",
    "task_id": 928
  },
  {
    "Question": "Write a function to count repeated items of a tuple.",
    "Answer": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count",
    "task_id": 929
  },
  {
    "Question": "Write a function to convert camel case string to snake case string by using regex.",
    "Answer": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
    "task_id": 933
  },
  {
    "Question": "Write a function to find the nth delannoy number.",
    "Answer": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
    "task_id": 934
  },
  {
    "Question": "Write a function to sort the given array by using heap sort.",
    "Answer": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n",
    "task_id": 940
  },
  {
    "Question": "Write a function to convert the given tuples into set.",
    "Answer": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ",
    "task_id": 945
  },
  {
    "Question": "Write a python function to find the length of the shortest word.",
    "Answer": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min",
    "task_id": 947
  },
  {
    "Question": "Write a function to get an item of a tuple.",
    "Answer": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item",
    "task_id": 948
  },
  {
    "Question": "Write a function to find out, if the given number is abundant.",
    "Answer": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n",
    "task_id": 955
  },
  {
    "Question": "Write a python function to get the position of rightmost set bit.",
    "Answer": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1",
    "task_id": 957
  },
  {
    "Question": "Write a python function to find the average of a list.",
    "Answer": "def Average(lst): \r\n    return sum(lst) / len(lst) ",
    "task_id": 959
  },
  {
    "Question": "Write a function to convert a roman numeral to an integer.",
    "Answer": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val",
    "task_id": 961
  },
  {
    "Question": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "Answer": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",
    "task_id": 962
  },
  {
    "Question": "Write a function to convert camel case string to snake case string.",
    "Answer": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
    "task_id": 965
  },
  {
    "Question": "Write a python function to accept the strings which contains all vowels.",
    "Answer": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ",
    "task_id": 967
  },
  {
    "Question": "Write a function to find minimum of two numbers.",
    "Answer": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y",
    "task_id": 970
  }
]